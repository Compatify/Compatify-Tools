<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Optimized Title Tag for SEO -->
    <title>Compatify: Device Compatibility Checker & Upgrade Roadmaps | Future-Proof Your Tech</title>
    <!-- Favicon (Browser Tab Logo) -->
    <link rel="icon" href="Compatify-logo.PNG" type="image/png">
    <!-- Meta Description for SEO -->
    <meta name="description" content="Use Compatify to quickly check compatibility between any two devices, generate personalized upgrade roadmaps, and understand obsolescence risks for your tech.">
    <!-- Google Fonts - Inter -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Chart.js CDN -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Google AdSense Auto Ads Script -->
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-2091022065516798"
     crossorigin="anonymous"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f9fafb; /* bg-gray-50 */
            color: #374151; /* text-gray-700 */
        }
        /* Custom styles for navigation on mobile (bottom bar) */
        @media (max-width: 767px) {
            .sidebar-nav {
                position: fixed;
                bottom: 0;
                left: 0;
                right: 0;
                width: 100%;
                height: auto;
                flex-direction: row;
                justify-content: space-around;
                border-top: 1px solid #e5e7eb; /* border-gray-200 */
                z-index: 50;
                padding: 0.5rem 0;
            }
            .sidebar-nav a {
                flex: 1;
                text-align: center;
                padding: 0.75rem 0.5rem;
                font-size: 0.75rem; /* text-xs */
            }
            .main-content-area {
                margin-bottom: 4rem; /* To prevent content from being hidden by bottom nav */
            }
        }
        /* Chart container styling for responsiveness */
        .chart-container {
            position: relative;
            height: 300px; /* Fixed height for the chart */
            width: 100%;
            max-width: 600px; /* Optional max-width for larger screens */
            margin: 0 auto; /* Center the chart */
        }
        /* Refined active navigation link style */
        .nav-link.active-link {
            background-color: #2563eb; /* bg-blue-600 */
            color: #ffffff; /* text-white */
            font-weight: 600; /* semibold */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* subtle shadow */
        }
        /* Subtle hover effect for cards */
        .card-hover-effect {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .card-hover-effect:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }
        /* Style for product cards */
        .product-card {
            transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
        }
        .product-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }
        .scroll-container {
            -ms-overflow-style: none;  /* IE and Edge */
            scrollbar-width: none;  /* Firefox */
        }
        .scroll-container::-webkit-scrollbar {
            display: none; /* Chrome, Safari, Opera */
        }
    </style>
</head>
<body class="flex flex-col md:flex-row min-h-screen bg-gray-50 text-gray-800">

    <!-- Message Modal -->
    <div id="messageModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full text-center transform transition-all duration-300 ease-out scale-95 opacity-0" id="modalContent">
            <p id="modalMessage" class="text-gray-900 text-lg font-semibold mb-4"></p>
            <button id="modalCloseButton" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors shadow-md">OK</button>
        </div>
    </div>

    <!-- Replace Device Modal -->
    <div id="replaceDeviceModal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full text-center transform transition-all duration-300 ease-out scale-95 opacity-0" id="replaceModalContent">
            <p class="text-gray-900 text-lg font-semibold mb-4">Two devices are already selected. Which one would you like to replace?</p>
            <div class="flex flex-col gap-3">
                <button id="replaceDevice1Btn" class="bg-orange-500 text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition-colors shadow-md">Replace Device 1</button>
                <button id="replaceDevice2Btn" class="bg-orange-500 text-white px-6 py-2 rounded-lg hover:bg-orange-600 transition-colors shadow-md">Replace Device 2</button>
                <button id="cancelReplaceBtn" class="bg-gray-300 text-gray-800 px-6 py-2 rounded-lg hover:bg-gray-400 transition-colors shadow-md">Cancel</button>
            </div>
        </div>
    </div>

    <!-- Sidebar Navigation (Desktop) / Bottom Navigation (Mobile) -->
    <nav class="sidebar-nav bg-gray-100 md:w-64 p-4 flex flex-col md:flex-col items-center shadow-lg md:shadow-none md:border-r border-gray-200">
        <div class="mb-8 md:mb-12 text-center md:text-left w-full">
            <!-- Compatify Logo with Alt Text -->
            <img src="Compatify-logo.PNG" alt="Compatify Logo - Device Compatibility Solutions" class="h-16 w-auto mx-auto md:mx-0 mb-4">
            <h1 class="text-3xl font-bold text-gray-900 mb-1">Compatify</h1>
            <p class="text-sm text-gray-500">Future-Proof Your Devices with the Power of AI</p>
        </div>
        <ul class="flex md:flex-col gap-2 md:gap-3 w-full">
            <li>
                <a href="#home" class="nav-link flex items-center gap-3 p-3 rounded-lg hover:bg-gray-200 transition-colors active-link">
                    <span class="text-xl">üåê</span> <span class="hidden md:inline text-base">Home</span>
                </a>
            </li>
            <li>
                <a href="#checker" class="nav-link flex items-center gap-3 p-3 rounded-lg hover:bg-gray-200 transition-colors">
                    <span class="text-xl">üî¨</span> <span class="hidden md:inline text-base">Compatibility Checker</span>
                </a>
            </li>
            <li>
                <a href="#inventory" class="nav-link flex items-center gap-3 p-3 rounded-lg hover:bg-gray-200 transition-colors">
                    <span class="text-xl">üóÑÔ∏è</span> <span class="hidden md:inline text-base">My Tech Inventory</span>
                </a>
            </li>
            <li>
                <a href="#obsolescence" class="nav-link flex items-center gap-3 p-3 rounded-lg hover:bg-gray-200 transition-colors">
                    <span class="text-xl">üìà</span> <span class="hidden md:inline text-base">Obsolescence Report</span>
                </a>
            </li>
            <li>
                <a href="#roadmap" class="nav-link flex items-center gap-3 p-3 rounded-lg hover:bg-gray-200 transition-colors">
                    <span class="text-xl">üß≠</span> <span class="hidden md:inline text-base">Upgrade Roadmap</span>
                </a>
            </li>
            <li>
                <a href="#monetization" class="nav-link flex items-center gap-3 p-3 rounded-lg hover:bg-gray-200 transition-colors">
                    <span class="text-xl">üí≤</span> <span class="hidden md:inline text-base">Monetization</span>
                </a>
            </li>
        </ul>
    </nav>

    <!-- Main Content Area -->
    <main id="contentDiv" class="main-content-area flex-1 p-6 md:p-10 overflow-y-auto">
        <!-- Content will be dynamically loaded here -->
    </main>

    <script>
        // Define the path to your JSON file - Now in the same directory as this HTML file
        const AFFILIATE_PRODUCTS_JSON_PATH = './affiliate_products.json';

        // --- Mock Data ---
        // This is where you would normally load your data from a database or API.
        // For this example, we'll use in-memory data.
        const deviceData = [
            // Laptops
            { id: 'macbook-pro-m1-2020', type: 'Laptop', brand: 'Apple', model: 'MacBook Pro M1 (2020)', releaseYear: 2020, ports: ['USB-C (Thunderbolt 3) x2', '3.5mm Audio Jack'], wirelessStandards: ['Wi-Fi 6', 'Bluetooth 5.0'], osCompatibility: ['macOS 11+', 'Windows (Boot Camp/Parallels)'], notes: "Excellent performance, but limited port selection. Thunderbolt 3 ports support DisplayPort Alt Mode.", futureProofingScore: 85, obsolescenceFactors: ['Limited native port diversity', 'Wi-Fi 6 not the latest (Wi-Fi 7 available)'], recommendedUpgrades: ['USB-C hub with multiple ports (USB-A, HDMI, Ethernet)', 'External SSD for expanded storage'] },
            { id: 'dell-xps-15-9530', type: 'Laptop', brand: 'Dell', model: 'XPS 15 (9530)', releaseYear: 2023, ports: ['Thunderbolt 4 x2', 'USB-C 3.2 Gen 2'], wirelessStandards: ['Wi-Fi 6E', 'Bluetooth 5.3'], osCompatibility: ['Windows 11'], notes: "High performance laptop with a great display and modern ports. Wi-Fi 6E is a significant improvement.", futureProofingScore: 92, obsolescenceFactors: ['Rapid CPU generation cycles'], recommendedUpgrades: ['Docking station for desk setup'] },
            // Monitors
            { id: 'dell-u2723qe', type: 'Monitor', brand: 'Dell', model: 'U2723QE', releaseYear: 2022, ports: ['HDMI 2.0', 'DisplayPort 1.4', 'USB-C (DisplayPort Alt Mode, 90W PD)'], resolution: '4K (3840x2160)', refreshRate: '60Hz', notes: "A professional monitor with excellent color accuracy and a versatile USB-C port that can charge a laptop.", futureProofingScore: 88, obsolescenceFactors: ['60Hz refresh rate is not ideal for gaming', 'HDMI 2.0 is not the latest standard (HDMI 2.1 available)'], recommendedUpgrades: ['USB-C to DisplayPort cable for full bandwidth'] },
            { id: 'samsung-odyssey-g9', type: 'Monitor', brand: 'Samsung', model: 'Odyssey G9', releaseYear: 2020, ports: ['HDMI 2.0', 'DisplayPort 1.4'], resolution: '5120x1440', refreshRate: '240Hz', notes: "An ultrawide gaming monitor with a high refresh rate. HDMI 2.0 is a limiting factor for some newer graphics cards.", futureProofingScore: 75, obsolescenceFactors: ['HDMI 2.0 limitation', 'Older model, newer G9s have improved panels'], recommendedUpgrades: ['Graphics card with DisplayPort 1.4 or higher'] },
            // Other Devices (Example)
            { id: 'apple-ipad-pro-m2', type: 'Tablet', brand: 'Apple', model: 'iPad Pro M2', releaseYear: 2022, ports: ['Thunderbolt / USB 4'], wirelessStandards: ['Wi-Fi 6E', 'Bluetooth 5.3', '5G'], osCompatibility: ['iPadOS 16+'], notes: "Powerful tablet with a Thunderbolt port for high-speed data transfer and display output.", futureProofingScore: 95, obsolescenceFactors: ['Fast-paced tablet market'], recommendedUpgrades: ['Magic Keyboard', 'Apple Pencil'] },
            { id: 'logitech-mx-master-3s', type: 'Mouse', brand: 'Logitech', model: 'MX Master 3S', releaseYear: 2022, ports: ['USB-C for charging'], wirelessStandards: ['Bluetooth', 'Logi Bolt'], notes: "A productivity-focused mouse with excellent ergonomics and multi-device support.", futureProofingScore: 90, obsolescenceFactors: ['Battery degradation over time'], recommendedUpgrades: [] }
        ];

        // --- Global State ---
        let selectedDevices = {
            device1: null,
            device2: null
        };
        let currentChart = null;
        let affiliateProductsData = [];

        // ====================================================================================================
        // Utility Functions
        // ====================================================================================================

        function showModal(message) {
            const modal = document.getElementById('messageModal');
            const modalMessage = document.getElementById('modalMessage');
            if (modal && modalMessage) {
                modalMessage.textContent = message;
                modal.classList.remove('hidden');
                setTimeout(() => {
                    document.getElementById('modalContent').classList.remove('scale-95', 'opacity-0');
                    document.getElementById('modalContent').classList.add('scale-100', 'opacity-100');
                }, 10);
            }
        }

        function hideModal() {
            const modal = document.getElementById('messageModal');
            if (modal) {
                document.getElementById('modalContent').classList.remove('scale-100', 'opacity-100');
                document.getElementById('modalContent').classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                    modal.classList.add('hidden');
                }, 300);
            }
        }

        // ====================================================================================================
        // Data Handling
        // ====================================================================================================

        async function fetchAffiliateProducts() {
            try {
                const response = await fetch(AFFILIATE_PRODUCTS_JSON_PATH);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                affiliateProductsData = await response.json();
                console.log('Affiliate products loaded:', affiliateProductsData);
            } catch (error) {
                console.error('Could not load affiliate products:', error);
                showModal('Failed to load product data. Please check the file path and try again.');
            }
        }

        // ====================================================================================================
        // Core Functionality
        // ====================================================================================================

        async function runCompatibilityCheck() {
            if (!selectedDevices.device1 || !selectedDevices.device2) {
                showModal('Please select two devices to compare.');
                return;
            }

            const device1 = selectedDevices.device1.model;
            const device2 = selectedDevices.device2.model;

            const compatibilityResultDiv = document.getElementById('compatibilityResult');
            const recommendedProductsDiv = document.getElementById('recommendedProducts');
            if (compatibilityResultDiv) {
                compatibilityResultDiv.innerHTML = `<div class="p-4 text-center text-gray-500">Checking compatibility...</div>`;
            }
            if (recommendedProductsDiv) {
                recommendedProductsDiv.innerHTML = `<div class="p-4 text-center text-gray-500">Finding recommendations...</div>`;
            }

            try {
                const prompt = `Perform a detailed compatibility analysis between "${device1}" and "${device2}".
The response should be a JSON object with the following structure:
{
  "analysis": "string detailing the compatibility analysis",
  "compatibility_score": "number between 0 and 100",
  "compatibility_status": "string, e.g., 'Fully Compatible', 'Partially Compatible', 'Not Compatible'",
  "required_accessories": ["list of required accessories as strings", "e.g., 'USB-C to HDMI adapter', 'DisplayPort cable'"],
  "compatibility_tags": ["list of keywords from the analysis, useful for product filtering", "e.g., 'USB-C', 'HDMI 2.1', 'DisplayPort'"]
}`;

                const payload = {
                    contents: [{ role: "user", parts: [{ text: prompt }] }],
                    generationConfig: {
                        responseMimeType: "application/json",
                        responseSchema: {
                            type: "OBJECT",
                            properties: {
                                "analysis": { "type": "STRING" },
                                "compatibility_score": { "type": "NUMBER" },
                                "compatibility_status": { "type": "STRING" },
                                "required_accessories": { "type": "ARRAY", "items": { "type": "STRING" } },
                                "compatibility_tags": { "type": "ARRAY", "items": { "type": "STRING" } }
                            },
                            "propertyOrdering": ["analysis", "compatibility_score", "compatibility_status", "required_accessories", "compatibility_tags"]
                        }
                    }
                };

                // The new proxy endpoint
                const proxyUrl = '/api/gemini-proxy';
                
                let response;
                let retries = 3;
                let delay = 1000;
                while (retries > 0) {
                    try {
                        response = await fetch(proxyUrl, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(payload)
                        });
                        if (response.status !== 429) break; // If not a rate limit error, break
                        retries--;
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2; // Exponential backoff
                    } catch (e) {
                        retries--;
                        await new Promise(res => setTimeout(res, delay));
                        delay *= 2;
                    }
                }

                if (!response || !response.ok) {
                    throw new Error(`API request failed with status: ${response ? response.status : 'unknown'}`);
                }

                const result = await response.json();
                const jsonString = result?.candidates?.[0]?.content?.parts?.[0]?.text;
                const parsedResult = JSON.parse(jsonString);

                displayCompatibilityResult(parsedResult);
                
                // Find and display recommended products
                const recommendedProducts = findRecommendedProducts(parsedResult.compatibility_tags, affiliateProductsData);
                displayRecommendedProducts(recommendedProducts);

            } catch (error) {
                console.error('API call failed:', error);
                if (compatibilityResultDiv) {
                    compatibilityResultDiv.innerHTML = `<div class="bg-red-100 text-red-700 p-4 rounded-lg mt-4">
                        <strong class="font-semibold">Error!</strong> Could not perform compatibility check. Please try again.
                    </div>`;
                }
                if (recommendedProductsDiv) {
                    recommendedProductsDiv.innerHTML = `<div class="bg-red-100 text-red-700 p-4 rounded-lg mt-4">
                        <strong class="font-semibold">Error!</strong> Product recommendations could not be loaded.
                    </div>`;
                }
            }
        }

        function displayCompatibilityResult(result) {
            const compatibilityResultDiv = document.getElementById('compatibilityResult');
            if (!compatibilityResultDiv) return;

            let statusColor = 'bg-gray-400';
            let statusTextColor = 'text-white';
            if (result.compatibility_score >= 80) {
                statusColor = 'bg-green-500';
            } else if (result.compatibility_score >= 50) {
                statusColor = 'bg-yellow-500';
            } else {
                statusColor = 'bg-red-500';
            }
            if (result.compatibility_score < 50) {
                statusTextColor = 'text-gray-900';
            }

            const accessoriesList = result.required_accessories.length > 0
                ? result.required_accessories.map(item => `<li class="flex items-center"><span class="text-blue-500 mr-2">üîó</span>${item}</li>`).join('')
                : `<li class="italic text-gray-500">No specific accessories required.</li>`;

            compatibilityResultDiv.innerHTML = `
                <div class="bg-white rounded-xl shadow-lg p-6 mt-6 border border-gray-200">
                    <div class="flex items-center justify-between mb-4">
                        <h3 class="text-2xl font-bold text-gray-900">Compatibility Analysis</h3>
                        <div class="px-3 py-1 rounded-full ${statusColor} ${statusTextColor} font-semibold text-sm">
                            ${result.compatibility_status} (${result.compatibility_score}%)
                        </div>
                    </div>
                    <p class="text-gray-600 mb-4">${result.analysis}</p>
                    <div class="mt-4">
                        <h4 class="text-lg font-semibold text-gray-800 mb-2">Required Accessories</h4>
                        <ul class="list-none space-y-2 text-gray-700">
                            ${accessoriesList}
                        </ul>
                    </div>
                </div>
            `;
        }

        function findRecommendedProducts(tags, products) {
            const flatTags = tags.map(tag => tag.toLowerCase().trim());
            const matchingProducts = products.filter(product => {
                const productTags = product.compatibility_tags.map(tag => tag.toLowerCase().trim());
                return productTags.some(tag => flatTags.includes(tag));
            });

            matchingProducts.forEach(product => {
                const productTags = product.compatibility_tags.map(tag => tag.toLowerCase().trim());
                const score = productTags.filter(tag => flatTags.includes(tag)).length;
                product.score = score;
            });

            return matchingProducts.sort((a, b) => b.score - a.score).slice(0, 5);
        }

        function displayRecommendedProducts(products) {
            const recommendedProductsDiv = document.getElementById('recommendedProducts');
            if (!recommendedProductsDiv) return;

            if (products.length === 0) {
                recommendedProductsDiv.innerHTML = `<div class="bg-yellow-100 text-yellow-700 p-4 rounded-lg mt-4">
                    <strong class="font-semibold">Note:</strong> No specific product recommendations found based on the compatibility tags.
                </div>`;
                return;
            }

            const productCards = products.map(product => `
                <div class="bg-white p-4 rounded-xl shadow-md border border-gray-200 flex flex-col product-card">
                    <img src="${product.image_url}" alt="${product.name}" class="w-full h-32 object-cover rounded-lg mb-4">
                    <h5 class="font-semibold text-gray-900 mb-2">${product.name}</h5>
                    <p class="text-sm text-gray-600 mb-4 flex-grow">${product.description}</p>
                    <a href="${product.affiliate_link}" target="_blank" class="block bg-blue-600 text-white text-center py-2 px-4 rounded-lg hover:bg-blue-700 transition-colors shadow">
                        Buy on Amazon
                    </a>
                </div>
            `).join('');

            recommendedProductsDiv.innerHTML = `
                <div class="mt-8">
                    <h3 class="text-2xl font-bold text-gray-900 mb-4">Recommended Products</h3>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        ${productCards}
                    </div>
                </div>
            `;
        }

        // ====================================================================================================
        // View Rendering (Main Logic)
        // ====================================================================================================

        function renderHomePage() {
            return `
                <div class="text-center p-8 bg-white rounded-xl shadow-lg">
                    <h2 class="text-4xl font-extrabold text-gray-900 mb-4 animate-fade-in">Welcome to Compatify!</h2>
                    <p class="text-lg text-gray-600 mb-6 max-w-2xl mx-auto animate-slide-up">
                        Your one-stop solution for device compatibility, upgrade roadmaps, and more.
                        Use the navigation to get started.
                    </p>
                    <div class="flex flex-col md:flex-row justify-center items-center gap-4 animate-zoom-in">
                        <a href="#checker" class="bg-blue-600 text-white font-bold py-3 px-6 rounded-full shadow-lg hover:bg-blue-700 transition-colors transform hover:scale-105">
                            Start a Compatibility Check
                        </a>
                        <a href="#inventory" class="bg-gray-200 text-gray-800 font-bold py-3 px-6 rounded-full shadow-lg hover:bg-gray-300 transition-colors transform hover:scale-105">
                            View My Tech Inventory
                        </a>
                    </div>
                </div>
            `;
        }

        function renderCompatibilityCheckerPage() {
            // Function to render the list of available devices
            function renderDeviceCards(deviceArray, targetId) {
                const deviceCards = deviceArray.map(device => `
                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200 cursor-pointer card-hover-effect" onclick="selectDevice('${targetId}', '${device.id}')">
                        <h4 class="font-semibold text-gray-800">${device.brand} ${device.model}</h4>
                        <p class="text-sm text-gray-500">${device.type} | Released: ${device.releaseYear}</p>
                    </div>
                `).join('');
                return deviceCards;
            }

            const device1Cards = renderDeviceCards(deviceData, 'device1');
            const device2Cards = renderDeviceCards(deviceData, 'device2');

            // The main HTML for the checker page
            return `
                <h2 class="text-3xl font-bold text-gray-900 mb-6">Compatibility Checker</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <!-- Device 1 Section -->
                    <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
                        <h3 class="text-2xl font-bold text-gray-900 mb-4">Device 1</h3>
                        <div id="selectedDevice1" class="p-4 bg-gray-100 rounded-lg text-center text-gray-500 italic mb-4">
                            No device selected
                        </div>
                        <div class="h-64 overflow-y-auto space-y-3 scroll-container border-t pt-4">
                            ${device1Cards}
                        </div>
                    </div>
                    <!-- Device 2 Section -->
                    <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200">
                        <h3 class="text-2xl font-bold text-gray-900 mb-4">Device 2</h3>
                        <div id="selectedDevice2" class="p-4 bg-gray-100 rounded-lg text-center text-gray-500 italic mb-4">
                            No device selected
                        </div>
                        <div class="h-64 overflow-y-auto space-y-3 scroll-container border-t pt-4">
                            ${device2Cards}
                        </div>
                    </div>
                </div>
                <!-- Action Button -->
                <div class="text-center mt-6">
                    <button onclick="runCompatibilityCheck()" class="bg-blue-600 text-white font-bold py-3 px-8 rounded-full shadow-lg hover:bg-blue-700 transition-colors transform hover:scale-105">
                        Run Compatibility Check
                    </button>
                </div>
                <!-- Result and Products Section -->
                <div id="compatibilityResult" class="mt-8">
                    <!-- Compatibility result will be injected here -->
                </div>
                <div id="recommendedProducts" class="mt-8">
                    <!-- Recommended products will be injected here -->
                </div>
            `;
        }

        function renderInventoryPage() {
            // Function to render the list of devices
            function renderDeviceList() {
                const deviceCards = deviceData.map(device => `
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200 card-hover-effect">
                        <h4 class="text-xl font-bold text-gray-900">${device.brand} ${device.model}</h4>
                        <p class="text-gray-600 mt-1">Type: ${device.type}</p>
                        <ul class="text-sm text-gray-500 mt-2 space-y-1">
                            <li>Ports: ${device.ports.join(', ')}</li>
                            <li>Wireless: ${device.wirelessStandards.join(', ')}</li>
                            <li>Released: ${device.releaseYear}</li>
                        </ul>
                    </div>
                `).join('');
                return `<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">${deviceCards}</div>`;
            }

            return `
                <h2 class="text-3xl font-bold text-gray-900 mb-6">My Tech Inventory</h2>
                <div class="text-gray-600 mb-6">
                    <p>This is a list of your registered devices. You can add more, edit details, or remove them.</p>
                </div>
                ${renderDeviceList()}
            `;
        }

        function renderObsolescenceReportPage() {
            // Function to create a pie chart for obsolescence factors
            function renderObsolescenceChart() {
                const totalFactors = deviceData.reduce((acc, device) => acc + device.obsolescenceFactors.length, 0);
                const factorCounts = deviceData.flatMap(device => device.obsolescenceFactors).reduce((acc, factor) => {
                    acc[factor] = (acc[factor] || 0) + 1;
                    return acc;
                }, {});

                const chartLabels = Object.keys(factorCounts);
                const chartData = Object.values(factorCounts);
                const backgroundColors = ['#f87171', '#fbbf24', '#34d399', '#60a5fa', '#a78bfa', '#f472b6', '#22d3ee'];

                if (currentChart) {
                    currentChart.destroy();
                }

                const ctx = document.getElementById('obsolescenceChartCanvas').getContext('2d');
                currentChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: chartLabels,
                        datasets: [{
                            label: 'Obsolescence Factors',
                            data: chartData,
                            backgroundColor: backgroundColors,
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right',
                                labels: {
                                    font: {
                                        family: 'Inter',
                                    }
                                }
                            },
                            title: {
                                display: true,
                                text: 'Obsolescence Factor Distribution',
                                font: {
                                    size: 18,
                                    family: 'Inter'
                                },
                                color: '#1f2937'
                            }
                        }
                    }
                });
            }

            // Function to render the individual device obsolescence summary
            function renderDeviceObsolescenceSummary() {
                const deviceSummaries = deviceData.map(device => `
                    <div class="bg-white p-6 rounded-xl shadow-md border border-gray-200">
                        <h4 class="text-xl font-bold text-gray-900">${device.brand} ${device.model}</h4>
                        <p class="mt-2 text-sm text-gray-700"><strong>Future-Proofing Score:</strong> <span class="font-semibold text-blue-600">${device.futureProofingScore}/100</span></p>
                        <p class="mt-1 text-sm text-gray-700"><strong>Primary Risks:</strong> ${device.obsolescenceFactors.join(', ')}</p>
                        <p class="mt-2 text-sm text-gray-700"><strong>Upgrade Advice:</strong> ${device.recommendedUpgrades.join(', ')}</p>
                    </div>
                `).join('');
                return `<div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-6">${deviceSummaries}</div>`;
            }

            // The main HTML for the obsolescence report page
            const pageHtml = `
                <h2 class="text-3xl font-bold text-gray-900 mb-6">Obsolescence Report</h2>
                <div class="text-gray-600 mb-6">
                    <p>This report analyzes your tech inventory for obsolescence risks and future-proofing scores.</p>
                </div>
                <div class="bg-white p-6 rounded-xl shadow-lg border border-gray-200 mb-8">
                    <div class="chart-container">
                        <canvas id="obsolescenceChartCanvas"></canvas>
                    </div>
                </div>
                <h3 class="text-2xl font-bold text-gray-900 mb-4">Device-Specific Analysis</h3>
                ${renderDeviceObsolescenceSummary()}
            `;

            // We need to use a setTimeout to ensure the canvas element exists before we try to render the chart
            setTimeout(renderObsolescenceChart, 10);
            return pageHtml;
        }

        function renderUpgradeRoadmapPage() {
            // Placeholder for the roadmap page
            return `
                <div class="text-center p-8 bg-white rounded-xl shadow-lg">
                    <h2 class="text-3xl font-bold text-gray-900 mb-4">Upgrade Roadmap</h2>
                    <p class="text-lg text-gray-600">This feature is coming soon! It will analyze your devices and suggest a long-term upgrade plan based on their obsolescence scores.</p>
                </div>
            `;
        }
        
        function renderMonetizationPage() {
            // Placeholder for the monetization page
            return `
                <div class="text-center p-8 bg-white rounded-xl shadow-lg">
                    <h2 class="text-3xl font-bold text-gray-900 mb-4">Monetization</h2>
                    <p class="text-lg text-gray-600">This page will showcase the ad placements and affiliate products, along with a report on their performance. For now, it's a placeholder to demonstrate the concept.</p>
                    <div class="mt-8 p-6 bg-gray-100 rounded-lg">
                        <p class="font-bold text-xl mb-2">Ad Placement Example</p>
                        <div class="bg-gray-300 h-32 flex items-center justify-center rounded-lg text-gray-500">
                            [Google AdSense Ad Placeholder]
                        </div>
                    </div>
                </div>
            `;
        }

        // --- Global Rendering Logic ---
        function renderPage(page) {
            const contentDiv = document.getElementById('contentDiv');
            const navLinks = document.querySelectorAll('.nav-link');

            // Clear active state from all nav links
            navLinks.forEach(link => link.classList.remove('active-link'));

            // Add active state to the current nav link
            const activeLink = document.querySelector(`.nav-link[href="#${page}"]`);
            if (activeLink) {
                activeLink.classList.add('active-link');
            }

            switch (page) {
                case 'home':
                    contentDiv.innerHTML = renderHomePage();
                    break;
                case 'checker':
                    contentDiv.innerHTML = renderCompatibilityCheckerPage();
                    break;
                case 'inventory':
                    contentDiv.innerHTML = renderInventoryPage();
                    break;
                case 'obsolescence':
                    contentDiv.innerHTML = renderObsolescenceReportPage();
                    break;
                case 'roadmap':
                    contentDiv.innerHTML = renderUpgradeRoadmapPage();
                    break;
                case 'monetization':
                    contentDiv.innerHTML = renderMonetizationPage();
                    break;
                default:
                    contentDiv.innerHTML = renderHomePage();
                    break;
            }
        }

        // --- Event Listeners and Initial Load ---
        document.addEventListener('DOMContentLoaded', () => {
            const modalCloseButton = document.getElementById('modalCloseButton');
            if (modalCloseButton) {
                modalCloseButton.addEventListener('click', hideModal);
            }

            // Function to handle device selection from the card list
            window.selectDevice = (targetId, deviceId) => {
                const device = deviceData.find(d => d.id === deviceId);
                if (!device) return;

                if (selectedDevices.device1 && selectedDevices.device2) {
                    showReplaceDeviceModal(targetId, newDevice);
                } else if (targetId === 'device1' && selectedDevices.device2 && selectedDevices.device2.id === deviceId) {
                    showModal('This device is already selected as Device 2.');
                } else if (targetId === 'device2' && selectedDevices.device1 && selectedDevices.device1.id === deviceId) {
                    showModal('This device is already selected as Device 1.');
                } else {
                    selectedDevices[targetId] = device;
                    updateSelectedDeviceUI(targetId);
                }
            };
            
            function showReplaceDeviceModal(targetId, newDevice) {
                const modal = document.getElementById('replaceDeviceModal');
                if (modal) {
                    document.getElementById('replaceDevice1Btn').onclick = () => {
                        selectedDevices.device1 = newDevice;
                        updateSelectedDeviceUI('device1');
                        hideReplaceDeviceModal();
                    };
                    document.getElementById('replaceDevice2Btn').onclick = () => {
                        selectedDevices.device2 = newDevice;
                        updateSelectedDeviceUI('device2');
                        hideReplaceDeviceModal();
                    };
                    document.getElementById('cancelReplaceBtn').onclick = hideReplaceDeviceModal;

                    modal.classList.remove('hidden');
                    setTimeout(() => {
                        document.getElementById('replaceModalContent').classList.remove('scale-95', 'opacity-0');
                        document.getElementById('replaceModalContent').classList.add('scale-100', 'opacity-100');
                    }, 10);
                }
            }

            function hideReplaceDeviceModal() {
                 const modal = document.getElementById('replaceDeviceModal');
                 if (modal) {
                     document.getElementById('replaceModalContent').classList.remove('scale-100', 'opacity-100');
                     document.getElementById('replaceModalContent').classList.add('scale-95', 'opacity-0');
                     setTimeout(() => {
                         modal.classList.add('hidden');
                     }, 300);
                 }
            }

            function updateSelectedDeviceUI(targetId) {
                const device = selectedDevices[targetId];
                const element = document.getElementById(`selected${targetId.charAt(0).toUpperCase() + targetId.slice(1)}`);
                if (element) {
                    if (device) {
                        element.innerHTML = `
                            <div class="text-left font-semibold text-gray-900">
                                ${device.brand} ${device.model}
                            </div>
                        `;
                        element.classList.remove('text-center', 'italic', 'text-gray-500');
                        element.classList.add('text-left', 'text-gray-900', 'font-semibold');
                    } else {
                        element.textContent = 'No device selected';
                        element.classList.add('text-center', 'italic', 'text-gray-500');
                        element.classList.remove('text-left', 'text-gray-900', 'font-semibold');
                    }
                }
            }

            // Initial load of affiliate products
            fetchAffiliateProducts();
            
            // Set up navigation
            const navLinks = document.querySelectorAll('.nav-link');
            navLinks.forEach(link => {
                link.addEventListener('click', (e) => {
                    e.preventDefault();
                    const page = e.currentTarget.getAttribute('href').substring(1);
                    window.history.pushState({}, '', `#${page}`);
                    renderPage(page);
                });
            });

            // Initial page render based on URL hash or default
            const initialPage = window.location.hash.substring(1) || 'home';
            renderPage(initialPage);

            // Handle browser back/forward buttons
            window.addEventListener('popstate', () => {
                const page = window.location.hash.substring(1) || 'home';
                renderPage(page);
            });
        });
    </script>
</body>
</html>